// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// ContractsABI is the input ABI used to generate the binding from.
const ContractsABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aProposals\",\"outputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"},{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"endDate\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"isActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"positionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"bytes32\"},{\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"name\":\"_positionId\",\"type\":\"uint256\"},{\"name\":\"_maxCandidate\",\"type\":\"uint8\"}],\"name\":\"addPosition\",\"outputs\":[{\"name\":\"positionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"initiateVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"name\":\"_positionId\",\"type\":\"uint256\"},{\"name\":\"_candidateId\",\"type\":\"uint256\"},{\"name\":\"_voterId\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposal\",\"type\":\"uint256\"},{\"name\":\"_voterAddr\",\"type\":\"address\"}],\"name\":\"getEligibleVoters\",\"outputs\":[{\"name\":\"voterId\",\"type\":\"uint256\"},{\"name\":\"voterAddr\",\"type\":\"address\"},{\"name\":\"positionId\",\"type\":\"uint256\"},{\"name\":\"isVerified\",\"type\":\"bool\"},{\"name\":\"isVoted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidateAddr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_positionId\",\"type\":\"uint256\"},{\"name\":\"_proposal\",\"type\":\"uint256\"},{\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"addCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"eligibleVotersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"addProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aVoters\",\"outputs\":[{\"name\":\"voterId\",\"type\":\"uint256\"},{\"name\":\"isUnique\",\"type\":\"bool\"},{\"name\":\"voterAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mPosition\",\"outputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"},{\"name\":\"positionId\",\"type\":\"uint256\"},{\"name\":\"maxCandidate\",\"type\":\"uint8\"},{\"name\":\"title\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposal\",\"type\":\"uint256\"},{\"name\":\"_positionId\",\"type\":\"uint256\"},{\"name\":\"_voterId\",\"type\":\"uint256\"},{\"name\":\"_voterAddr\",\"type\":\"address\"}],\"name\":\"VerifyVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposal\",\"type\":\"uint256\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"candidatesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidateId\",\"type\":\"uint256\"},{\"name\":\"_positionId\",\"type\":\"uint256\"},{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"accreditCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mProposalVoters\",\"outputs\":[{\"name\":\"isVerified\",\"type\":\"bool\"},{\"name\":\"isVoted\",\"type\":\"bool\"},{\"name\":\"positionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"},{\"name\":\"_IDVoter\",\"type\":\"uint256\"}],\"name\":\"registerVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mCandidate\",\"outputs\":[{\"name\":\"candidateId\",\"type\":\"uint256\"},{\"name\":\"positionId\",\"type\":\"uint256\"},{\"name\":\"proposalId\",\"type\":\"uint256\"},{\"name\":\"isAccredited\",\"type\":\"bool\"},{\"name\":\"isUnique\",\"type\":\"bool\"},{\"name\":\"candidateAddr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVotes\",\"outputs\":[{\"name\":\"proposalId\",\"type\":\"uint256\"},{\"name\":\"positionId\",\"type\":\"uint256\"},{\"name\":\"candidateId\",\"type\":\"uint256\"},{\"name\":\"voterId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_voter\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_proposal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_position\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_title\",\"type\":\"bytes32\"}],\"name\":\"NewPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_position\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_candidateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"NewCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_position\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_candidate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_voter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_voterAddr\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_idHash\",\"type\":\"uint256\"}],\"name\":\"NewVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_candidate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_proposal\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"Accredited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"ProposalActive\",\"type\":\"event\"}]"

// ContractsBin is the compiled bytecode used for deploying new contracts.
const ContractsBin = `{
	"linkReferences": {},
	"object": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061323a806100606000396000f3fe608060405260043610610117576000357c010000000000000000000000000000000000000000000000000000000090048063109bdf0a1461011c5780632014678d1461018b57806325d1a351146101da578063457146841461024a5780635c39fcc11461029d57806368c9e388146102f45780636fee3d261461034d57806370b75e4c1461040c5780637e7f72a0146104995780638778b27d146104e857806398c0793814610513578063a536c98b1461053e578063b1605720146105a1578063b32f0ecf1461062e578063b48918f5146106a2578063b59278b914610729578063c95859e814610782578063cbd342cc146107e9578063cbea81ef14610858578063cfb38b13146108c7578063de63f43214610988575b600080fd5b34801561012857600080fd5b506101556004803603602081101561013f57600080fd5b81019080803590602001909291905050506109ec565b60405180868152602001858152602001848152602001838152602001821515151581526020019550505050505060405180910390f35b34801561019757600080fd5b506101c4600480360360208110156101ae57600080fd5b8101908080359060200190929190505050610a3e565b6040518082815260200191505060405180910390f35b3480156101e657600080fd5b50610234600480360360808110156101fd57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803560ff169060200190929190505050610a5e565b6040518082815260200191505060405180910390f35b34801561025657600080fd5b506102836004803603602081101561026d57600080fd5b8101908080359060200190929190505050610e6a565b604051808215151515815260200191505060405180910390f35b3480156102a957600080fd5b506102b2611017565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030057600080fd5b5061034b6004803603608081101561031757600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019092919050505061103c565b005b34801561035957600080fd5b506103a66004803603604081101561037057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611957565b604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183151515158152602001821515151581526020019550505050505060405180910390f35b34801561041857600080fd5b50610483600480360360a081101561042f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611b96565b6040518082815260200191505060405180910390f35b3480156104a557600080fd5b506104d2600480360360208110156104bc57600080fd5b810190808035906020019092919050505061234a565b6040518082815260200191505060405180910390f35b3480156104f457600080fd5b506104fd61236a565b6040518082815260200191505060405180910390f35b34801561051f57600080fd5b50610528612377565b6040518082815260200191505060405180910390f35b34801561054a57600080fd5b5061058b6004803603606081101561056157600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050612384565b6040518082815260200191505060405180910390f35b3480156105ad57600080fd5b506105da600480360360208110156105c457600080fd5b8101908080359060200190929190505050612605565b60405180848152602001831515151581526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390f35b34801561063a57600080fd5b506106716004803603604081101561065157600080fd5b81019080803590602001909291908035906020019092919050505061266b565b604051808581526020018481526020018360ff1660ff16815260200182815260200194505050505060405180910390f35b3480156106ae57600080fd5b5061070f600480360360808110156106c557600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126c4565b604051808215151515815260200191505060405180910390f35b34801561073557600080fd5b5061076c6004803603604081101561074c57600080fd5b810190808035906020019092919080359060200190929190505050612ae5565b6040518082815260200191505060405180910390f35b34801561078e57600080fd5b506107cf600480360360608110156107a557600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050612b17565b604051808215151515815260200191505060405180910390f35b3480156107f557600080fd5b5061082c6004803603604081101561080c57600080fd5b810190808035906020019092919080359060200190929190505050612e0b565b604051808415151515815260200183151515158152602001828152602001935050505060405180910390f35b34801561086457600080fd5b506108b16004803603604081101561087b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612e6b565b6040518082815260200191505060405180910390f35b3480156108d357600080fd5b50610914600480360360608110156108ea57600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506130ae565b6040518088815260200187815260200186815260200185151515158152602001841515151581526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200197505050505050505060405180910390f35b34801561099457600080fd5b506109c1600480360360208110156109ab57600080fd5b8101908080359060200190929190505050613153565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b600b818154811015156109fb57fe5b90600052602060002090600502016000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b600060016000838152602001908152602001600020805490509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001807f4f6e6c792074686520696e69746961746f72206f6620746869732062616c6c6f81526020017f742063616e20706572666f726d207468697320616374696f6e0000000000000081525060400191505060405180910390fd5b6006600085815260200190815260200160002060010160009054906101000a900460ff161515610c08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f506f736974696f6e732063616e206f6e6c7920626520616464656420746f206581526020017f78697374696e6720707270726f706f73616c732100000000000000000000000081525060400191505060405180910390fd5b600b6006600086815260200190815260200160002060000154815481101515610c2d57fe5b906000526020600020906005020160040160009054906101000a900460ff16158015610c8f575042600b6006600087815260200190815260200160002060000154815481101515610c7a57fe5b90600052602060002090600502016002015410155b1515610d29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c8152602001807f4e657720706f736974696f6e732063616e6e6f7420626520616464656420746f81526020017f20616e20616374697665206f7220656e6465642070726f706f73616c0000000081525060400191505060405180910390fd5b6000600160008681526020019081526020016000206080604051908101604052808781526020018681526020018560ff1681526020018881525090806001815401808255809150509060018203906000526020600020906004020160009091929091909150600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff1602179055506060820151816003015550509050604080519081016040528060018303815260200160011515815250600860008681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050508584867fc0ee56176e739792e75a2fab38606e3331814f6921088f2934b8a279d3a234cb60405160405180910390a460018103915050949350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f56576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001807f4f6e6c792074686520696e69746961746f72206f6620746869732062616c6c6f81526020017f742063616e20706572666f726d207468697320616374696f6e0000000000000081525060400191505060405180910390fd5b610f5e613192565b60066000848152602001908152602001600020604080519081016040529081600082015481526020016001820160009054906101000a900460ff16151515158152505090506001600b8260000151815481101515610fb857fe5b906000526020600020906005020160040160006101000a81548160ff021916908315150217905550827f9b74c3bb17673b7eaf4d072ccbd3d83177acced2552ff346ebfdcabbfd60793d60405160405180910390a26001915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611044613192565b60066000868152602001908152602001600020604080519081016040529081600082015481526020016001820160009054906101000a900460ff161515151581525050905042600b826000015181548110151561109d57fe5b9060005260206000209060050201600201541115156110f4576000600b82600001518154811015156110cb57fe5b906000526020600020906005020160040160006101000a81548160ff0219169083151502179055505b42600b826000015181548110151561110857fe5b9060005260206000209060050201600201541115156111b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f566f74696e672068617320656e64656420666f7220746869732070726f706f7381526020017f616c21000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600b81600001518154811015156111c857fe5b906000526020600020906005020160040160009054906101000a900460ff161515611281576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f546869732070726f706f73616c206973206e6f742061637469766520666f722081526020017f766f74657321000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611289613192565b60076000858152602001908152602001600020604080519081016040529081600082015481526020016001820160009054906101000a900460ff16151515158152505090506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060096000838152602001908152602001600020549050600260008981526020019081526020016000206000888152602001908152602001600020836000015181548110151561135f57fe5b906000526020600020906005020160030160009054906101000a900460ff161515611418576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001807f5468652063616e64696461746520796f752077616e7420746f20766f7465206681526020017f6f72206973206e6f74206163637265646974656421000000000000000000000081525060400191505060405180910390fd5b600360008981526020019081526020016000208181548110151561143857fe5b906000526020600020906002020160000160009054906101000a900460ff1615156114f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f596f7520617265206e6f7420656c696769626c6520746f20766f7465206f6e2081526020017f746869732070726f706f73616c2100000000000000000000000000000000000081525060400191505060405180910390fd5b600460008981526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561160c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f596f75206861766520766f74656420696e207468697320706f736974696f6e2081526020017f616c72656164790000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60056000898152602001908152602001600020600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611716576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f596f75206861766520766f74656420696e207468697320706f736974696f6e2081526020017f616c72656164790000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600d6080604051908101604052808a81526020018981526020018881526020018781525090806001815401808255809150509060018203906000526020600020906004020160009091929091909150600082015181600001556020820151816001015560408201518160020155606082015181600301555050506001600460008a81526020019081526020016000206000898152602001908152602001600020600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560008a8152602001908152602001600020600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360008a8152602001908152602001600020828154811015156118b757fe5b906000526020600020906002020160000160016101000a81548160ff0219169083151502179055508587897fed713a090e7c13addbebee5adb0fb6ca78cfd62ed6e87ef782b0707d19fcc6508833604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a45050505050505050565b600080600080600080600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960008381526020019081526020016000205490506119c26131ae565b600c838154811015156119d157fe5b906000526020600020906002020160606040519081016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050611a706131e8565b600360008c815260200190815260200160002083815481101515611a9057fe5b9060005260206000209060020201606060405190810160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff16151515158152602001600182015481525050905080600001511515611b65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4e6f7420456c696769626c65210000000000000000000000000000000000000081525060200191505060405180910390fd5b8160000151826040015182604001518360000151846020015198509850985098509850505050509295509295909350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001807f4f6e6c792074686520696e69746961746f72206f6620746869732062616c6c6f81526020017f742063616e20706572666f726d207468697320616374696f6e0000000000000081525060400191505060405180910390fd5b611c8a613192565b60066000858152602001908152602001600020604080519081016040529081600082015481526020016001820160009054906101000a900460ff1615151515815250509050611cd7613192565b60086000878152602001908152602001600020604080519081016040529081600082015481526020016001820160009054906101000a900460ff1615151515815250509050611d24613192565b60076000868152602001908152602001600020604080519081016040529081600082015481526020016001820160009054906101000a900460ff16151515158152505090508060200151151515611e09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f43616e64696461746520686173206265656e20616464656420616c726561647981526020017f210000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b82602001511515611ea8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f43616e6469646174652063616e206f6e6c7920626520616464656420746f206181526020017f6e206578697374696e672070726f706f73616c0000000000000000000000000081525060400191505060405180910390fd5b600b8360000151815481101515611ebb57fe5b906000526020600020906005020160040160009054906101000a900460ff16158015611f0b575042600b8460000151815481101515611ef657fe5b90600052602060002090600502016002015410155b1515611fa5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001807f43616e6469646174652063616e6e6f7420626520616464656420746f20616e2081526020017f616374697665206f7220656e6465642070726f706f73616c000000000000000081525060400191505060405180910390fd5b81602001511515612044576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f43616e6469646174652063616e206f6e6c7920626520616464656420746f206181526020017f6e206578697374696e6720706f736974696f6e0000000000000000000000000081525060400191505060405180910390fd5b6002600087815260200190815260200160002060008881526020019081526020016000208054905060016000888152602001908152602001600020836000015181548110151561209057fe5b906000526020600020906004020160020160009054906101000a900460ff1660ff161015151561214e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f506f736974696f6e206d6178696d756d2063616e64696461746520657863656581526020017f646564210000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600060026000888152602001908152602001600020600089815260200190815260200160002060e0604051908101604052808881526020018a81526020018981526020016000151581526020016001151581526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018b8152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690831515021790555060a08201518160030160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816004015550509050604080519081016040528060018303815260200160011515815250600760008881526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050508888887f1e95643b0827ec2147ab47714fc6a9cace51b62fcfe439b405debb4ce49c8536896040518082815260200191505060405180910390a46001810394505050505095945050505050565b600060036000838152602001908152602001600020805490509050919050565b6000600d80549050905090565b6000600c80549050905090565b60006006600084815260200190815260200160002060010160009054906101000a900460ff1615151561241f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f50726f706f73616c20616c72656164792061646465642100000000000000000081525060200191505060405180910390fd5b4282101515156124bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f456e642064617465206f662070726f706f73616c20706f7374206d652061206481526020017f61746520696e207468652066757475726500000000000000000000000000000081525060400191505060405180910390fd5b6000600b60a06040519081016040528086815260200142815260200185815260200187815260200160001515815250908060018154018082558091505090600182039060005260206000209060050201600090919290919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555050509050604080519081016040528060018303815260200160011515815250600660008681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555090505083857fab8719914d0ac507e4a8449cc44d9067d0513f6cacce323c05dd17bf1b171e57856040518082815260200191505060405180910390a3600181039150509392505050565b600c8181548110151561261457fe5b90600052602060002090600202016000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b60016020528160005260406000208181548110151561268657fe5b9060005260206000209060040201600091509150508060000154908060010154908060020160009054906101000a900460ff16908060030154905084565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001807f4f6e6c792074686520696e69746961746f72206f6620746869732062616c6c6f81526020017f742063616e20706572666f726d207468697320616374696f6e0000000000000081525060400191505060405180910390fd5b600b60066000878152602001908152602001600020600001548154811015156127d557fe5b906000526020600020906005020160040160009054906101000a900460ff16158015612837575042600b600660008881526020019081526020016000206000015481548110151561282257fe5b90600052602060002090600502016002015410155b15156128d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001807f566f746572732063616e6e6f7420626520766572696669656420666f7220616e81526020017f20616374697665206f7220656e6465642070726f706f73616c0000000000000081525060400191505060405180910390fd5b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600c8181548110151561292457fe5b906000526020600020906002020160010160009054906101000a900460ff1615156129dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f566f746572206e6f7420666f756e642120566f7465722068617320746f20626581526020017f206164646564206669727374000000000000000000000000000000000000000081525060400191505060405180910390fd5b600060036000888152602001908152602001600020606060405190810160405280600115158152602001600015158152602001888152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010155505090506001810360096000848152602001908152602001600020819055508587867fa2dc1494de1f2b3b6c6ad35fb60e947a264246252bc0245922cfb612e6ccb7cd60405160405180910390a4600192505050949350505050565b600060026000848152602001908152602001600020600083815260200190815260200160002080549050905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001807f4f6e6c792074686520696e69746961746f72206f6620746869732062616c6c6f81526020017f742063616e20706572666f726d207468697320616374696f6e0000000000000081525060400191505060405180910390fd5b600b6006600084815260200190815260200160002060000154815481101515612c2857fe5b906000526020600020906005020160040160009054906101000a900460ff16158015612c8a575042600b6006600085815260200190815260200160002060000154815481101515612c7557fe5b90600052602060002090600502016002015410155b1515612d24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f8152602001807f43616e646964617465732063616e6e6f7420626520616363726564697465642081526020017f666f7220616e20616374697665206f7220656e6465642070726f706f73616c0081525060400191505060405180910390fd5b612d2c613192565b60076000868152602001908152602001600020604080519081016040529081600082015481526020016001820160009054906101000a900460ff161515151581525050905060016002600085815260200190815260200160002060008681526020019081526020016000208260000151815481101515612da857fe5b906000526020600020906005020160030160006101000a81548160ff0219169083151502179055508383867f73d96b366a16ae6ee378029ad183381ce418bfedaf573cbd5292ef9df4cd13c260405160405180910390a460019150509392505050565b600360205281600052604060002081815481101515612e2657fe5b9060005260206000209060020201600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154905083565b600080600c805490501115612f33576000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515612f32576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f566f74657220616c72656164792061646465642100000000000000000000000081525060200191505060405180910390fd5b5b6000600c6060604051908101604052808581526020016001151581526020018673ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050905060018103600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167fc13c7a26f6074f0de1b23f0fded61c05f23fca064951d26e3e074db2f5f4f87d846040518082815260200191505060405180910390a26001810391505092915050565b6002602052826000526040600020602052816000526040600020818154811015156130d557fe5b906000526020600020906005020160009250925050508060000154908060010154908060020154908060030160009054906101000a900460ff16908060030160019054906101000a900460ff16908060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154905087565b600d8181548110151561316257fe5b90600052602060002090600402016000915090508060000154908060010154908060020154908060030154905084565b6040805190810160405280600081526020016000151581525090565b60606040519081016040528060008152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60606040519081016040528060001515815260200160001515815260200160008152509056fea165627a7a72305820b398db40bd894a49faa33775ef99b4eaedc7b3b3ab3d2bb1ecde80b8bf1b2d8f0029",
	"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x323A DUP1 PUSH2 0x60 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x117 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x109BDF0A EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x2014678D EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x25D1A351 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x45714684 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x5C39FCC1 EQ PUSH2 0x29D JUMPI DUP1 PUSH4 0x68C9E388 EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x6FEE3D26 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0x70B75E4C EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0x7E7F72A0 EQ PUSH2 0x499 JUMPI DUP1 PUSH4 0x8778B27D EQ PUSH2 0x4E8 JUMPI DUP1 PUSH4 0x98C07938 EQ PUSH2 0x513 JUMPI DUP1 PUSH4 0xA536C98B EQ PUSH2 0x53E JUMPI DUP1 PUSH4 0xB1605720 EQ PUSH2 0x5A1 JUMPI DUP1 PUSH4 0xB32F0ECF EQ PUSH2 0x62E JUMPI DUP1 PUSH4 0xB48918F5 EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0xB59278B9 EQ PUSH2 0x729 JUMPI DUP1 PUSH4 0xC95859E8 EQ PUSH2 0x782 JUMPI DUP1 PUSH4 0xCBD342CC EQ PUSH2 0x7E9 JUMPI DUP1 PUSH4 0xCBEA81EF EQ PUSH2 0x858 JUMPI DUP1 PUSH4 0xCFB38B13 EQ PUSH2 0x8C7 JUMPI DUP1 PUSH4 0xDE63F432 EQ PUSH2 0x988 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x155 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x9EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA3E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x234 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x283 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x26D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B2 PUSH2 0x1017 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x103C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1957 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1B96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x234A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4FD PUSH2 0x236A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x528 PUSH2 0x2377 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x58B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x561 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2384 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2605 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x671 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x266B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x6C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x26C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x735 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x76C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x74C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2AE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x78E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7CF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x7A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2B17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x82C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x80C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2E0B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP4 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x87B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2E6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x914 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x8EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP8 POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x994 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3153 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0xB DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x9FB JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0xB4A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x39 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F6E6C792074686520696E69746961746F72206F6620746869732062616C6C6F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x742063616E20706572666F726D207468697320616374696F6E00000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0xC08 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x34 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x506F736974696F6E732063616E206F6E6C7920626520616464656420746F2065 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x78697374696E6720707270726F706F73616C7321000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB PUSH1 0x6 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC2D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xC8F JUMPI POP TIMESTAMP PUSH1 0xB PUSH1 0x6 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xC7A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0xD29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E657720706F736974696F6E732063616E6E6F7420626520616464656420746F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x20616E20616374697665206F7220656E6465642070726F706F73616C00000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE POP SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE POP POP SWAP1 POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP4 SUB DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x8 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP6 DUP5 DUP7 PUSH32 0xC0EE56176E739792E75A2FAB38606E3331814F6921088F2934B8A279D3A234CB PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 DUP2 SUB SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0xF56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x39 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F6E6C792074686520696E69746961746F72206F6620746869732062616C6C6F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x742063616E20706572666F726D207468697320616374696F6E00000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF5E PUSH2 0x3192 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x1 PUSH1 0xB DUP3 PUSH1 0x0 ADD MLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xFB8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH32 0x9B74C3BB17673B7EAF4D072CCBD3D83177ACCED2552FF346EBFDCABBFD60793D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x1044 PUSH2 0x3192 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP TIMESTAMP PUSH1 0xB DUP3 PUSH1 0x0 ADD MLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x109D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD GT ISZERO ISZERO PUSH2 0x10F4 JUMPI PUSH1 0x0 PUSH1 0xB DUP3 PUSH1 0x0 ADD MLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x10CB JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST TIMESTAMP PUSH1 0xB DUP3 PUSH1 0x0 ADD MLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1108 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD GT ISZERO ISZERO PUSH2 0x11B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x566F74696E672068617320656E64656420666F7220746869732070726F706F73 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x616C210000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB DUP2 PUSH1 0x0 ADD MLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x11C8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1281 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x546869732070726F706F73616C206973206E6F742061637469766520666F7220 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x766F746573210000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1289 PUSH2 0x3192 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH1 0xA PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 PUSH1 0x0 ADD MLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x135F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1418 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x35 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5468652063616E64696461746520796F752077616E7420746F20766F74652066 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6F72206973206E6F742061636372656469746564210000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1438 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x14F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x596F7520617265206E6F7420656C696769626C6520746F20766F7465206F6E20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x746869732070726F706F73616C21000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0x160C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x596F75206861766520766F74656420696E207468697320706F736974696F6E20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x616C726561647900000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0x1716 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x596F75206861766520766F74656420696E207468697320706F736974696F6E20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x616C726561647900000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE POP SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE POP POP POP PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x18B7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP6 DUP8 DUP10 PUSH32 0xED713A090E7C13ADDBEBEE5ADB0FB6CA78CFD62ED6E87EF782B0707D19FCC650 DUP9 CALLER PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x19C2 PUSH2 0x31AE JUMP JUMPDEST PUSH1 0xC DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x19D1 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH2 0x1A70 PUSH2 0x31E8 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1A90 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD ISZERO ISZERO PUSH2 0x1B65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F7420456C696769626C652100000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x1C82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x39 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F6E6C792074686520696E69746961746F72206F6620746869732062616C6C6F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x742063616E20706572666F726D207468697320616374696F6E00000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C8A PUSH2 0x3192 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH2 0x1CD7 PUSH2 0x3192 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH2 0x1D24 PUSH2 0x3192 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD ISZERO ISZERO ISZERO PUSH2 0x1E09 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E64696461746520686173206265656E20616464656420616C7265616479 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x2100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD ISZERO ISZERO PUSH2 0x1EA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x33 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6469646174652063616E206F6E6C7920626520616464656420746F2061 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6E206578697374696E672070726F706F73616C00000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB DUP4 PUSH1 0x0 ADD MLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1EBB JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x1F0B JUMPI POP TIMESTAMP PUSH1 0xB DUP5 PUSH1 0x0 ADD MLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1EF6 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x1FA5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x38 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6469646174652063616E6E6F7420626520616464656420746F20616E20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x616374697665206F7220656E6465642070726F706F73616C0000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD ISZERO ISZERO PUSH2 0x2044 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x33 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6469646174652063616E206F6E6C7920626520616464656420746F2061 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6E206578697374696E6720706F736974696F6E00000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 PUSH1 0x0 ADD MLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2090 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT ISZERO ISZERO ISZERO PUSH2 0x214E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x506F736974696F6E206D6178696D756D2063616E646964617465206578636565 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6465642100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0xE0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE POP SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE POP POP SWAP1 POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP4 SUB DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP9 DUP9 DUP9 PUSH32 0x1E95643B0827EC2147AB47714FC6A9CACE51B62FCFE439B405DEBB4CE49C8536 DUP10 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 DUP2 SUB SWAP5 POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0x241F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x50726F706F73616C20616C726561647920616464656421000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP DUP3 LT ISZERO ISZERO ISZERO PUSH2 0x24BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x456E642064617465206F662070726F706F73616C20706F7374206D6520612064 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x61746520696E2074686520667574757265000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0xA0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP SWAP1 POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP4 SUB DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP4 DUP6 PUSH32 0xAB8719914D0AC507E4A8449CC44D9067D0513F6CACCE323C05DD17BF1B171E57 DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 DUP2 SUB SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xC DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2614 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2686 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 POP DUP5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x27B0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x39 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F6E6C792074686520696E69746961746F72206F6620746869732062616C6C6F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x742063616E20706572666F726D207468697320616374696F6E00000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB PUSH1 0x6 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x27D5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x2837 JUMPI POP TIMESTAMP PUSH1 0xB PUSH1 0x6 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2822 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x28D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x39 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x566F746572732063616E6E6F7420626520766572696669656420666F7220616E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x20616374697665206F7220656E6465642070726F706F73616C00000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0xC DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2924 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x29DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x566F746572206E6F7420666F756E642120566F7465722068617320746F206265 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x2061646465642066697273740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE POP SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP SWAP1 POP PUSH1 0x1 DUP2 SUB PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP6 DUP8 DUP7 PUSH32 0xA2DC1494DE1F2B3B6C6AD35FB60E947A264246252BC0245922CFB612E6CCB7CD PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x2C03 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x39 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F6E6C792074686520696E69746961746F72206F6620746869732062616C6C6F DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x742063616E20706572666F726D207468697320616374696F6E00000000000000 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2C28 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x2C8A JUMPI POP TIMESTAMP PUSH1 0xB PUSH1 0x6 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2C75 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x2D24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E646964617465732063616E6E6F74206265206163637265646974656420 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x666F7220616E20616374697665206F7220656E6465642070726F706F73616C00 DUP2 MSTORE POP PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2D2C PUSH2 0x3192 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 PUSH1 0x0 ADD MLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2DA8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP4 DUP4 DUP7 PUSH32 0x73D96B366A16AE6EE378029AD183381CE418BFEDAF573CBD5292EF9DF4CD13C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2E26 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xC DUP1 SLOAD SWAP1 POP GT ISZERO PUSH2 0x2F33 JUMPI PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO ISZERO ISZERO PUSH2 0x2F32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x566F74657220616C726561647920616464656421000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP SWAP1 POP PUSH1 0x1 DUP2 SUB PUSH1 0xA PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC13C7A26F6074F0DE1B23F0FDED61C05F23FCA064951D26E3E074DB2F5F4F87D DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP2 SUB SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x30D5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP3 POP SWAP3 POP POP POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x3 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP8 JUMP JUMPDEST PUSH1 0xD DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3162 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 POP DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xb3 SWAP9 0xdb BLOCKHASH 0xbd DUP10 0x4a 0x49 STATICCALL LOG3 CALLDATACOPY PUSH22 0xEF99B4EAEDC7B3B3AB3D2BB1ECDE80B8BF1B2D8F0029 ",
	"sourceMap": "33:10295:0:-;;;2773:60;8:9:-1;5:2;;;30:1;27;20:12;5:2;2773:60:0;2816:10;2804:9;;:22;;;;;;;;;;;;;;;;;;33:10295;;;;;;"
}`

// DeployContracts deploys a new Ethereum contract, binding an instance of Contracts to it.
func DeployContracts(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contracts, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContractsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// AProposals is a free data retrieval call binding the contract method 0x109bdf0a.
//
// Solidity: function aProposals( uint256) constant returns(proposalId uint256, startDate uint256, endDate uint256, name bytes32, isActive bool)
func (_Contracts *ContractsCaller) AProposals(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ProposalId *big.Int
	StartDate  *big.Int
	EndDate    *big.Int
	Name       [32]byte
	IsActive   bool
}, error) {
	ret := new(struct {
		ProposalId *big.Int
		StartDate  *big.Int
		EndDate    *big.Int
		Name       [32]byte
		IsActive   bool
	})
	out := ret
	err := _Contracts.contract.Call(opts, out, "aProposals", arg0)
	return *ret, err
}

// AProposals is a free data retrieval call binding the contract method 0x109bdf0a.
//
// Solidity: function aProposals( uint256) constant returns(proposalId uint256, startDate uint256, endDate uint256, name bytes32, isActive bool)
func (_Contracts *ContractsSession) AProposals(arg0 *big.Int) (struct {
	ProposalId *big.Int
	StartDate  *big.Int
	EndDate    *big.Int
	Name       [32]byte
	IsActive   bool
}, error) {
	return _Contracts.Contract.AProposals(&_Contracts.CallOpts, arg0)
}

// AProposals is a free data retrieval call binding the contract method 0x109bdf0a.
//
// Solidity: function aProposals( uint256) constant returns(proposalId uint256, startDate uint256, endDate uint256, name bytes32, isActive bool)
func (_Contracts *ContractsCallerSession) AProposals(arg0 *big.Int) (struct {
	ProposalId *big.Int
	StartDate  *big.Int
	EndDate    *big.Int
	Name       [32]byte
	IsActive   bool
}, error) {
	return _Contracts.Contract.AProposals(&_Contracts.CallOpts, arg0)
}

// AVoters is a free data retrieval call binding the contract method 0xb1605720.
//
// Solidity: function aVoters( uint256) constant returns(voterId uint256, isUnique bool, voterAddr address)
func (_Contracts *ContractsCaller) AVoters(opts *bind.CallOpts, arg0 *big.Int) (struct {
	VoterId   *big.Int
	IsUnique  bool
	VoterAddr common.Address
}, error) {
	ret := new(struct {
		VoterId   *big.Int
		IsUnique  bool
		VoterAddr common.Address
	})
	out := ret
	err := _Contracts.contract.Call(opts, out, "aVoters", arg0)
	return *ret, err
}

// AVoters is a free data retrieval call binding the contract method 0xb1605720.
//
// Solidity: function aVoters( uint256) constant returns(voterId uint256, isUnique bool, voterAddr address)
func (_Contracts *ContractsSession) AVoters(arg0 *big.Int) (struct {
	VoterId   *big.Int
	IsUnique  bool
	VoterAddr common.Address
}, error) {
	return _Contracts.Contract.AVoters(&_Contracts.CallOpts, arg0)
}

// AVoters is a free data retrieval call binding the contract method 0xb1605720.
//
// Solidity: function aVoters( uint256) constant returns(voterId uint256, isUnique bool, voterAddr address)
func (_Contracts *ContractsCallerSession) AVoters(arg0 *big.Int) (struct {
	VoterId   *big.Int
	IsUnique  bool
	VoterAddr common.Address
}, error) {
	return _Contracts.Contract.AVoters(&_Contracts.CallOpts, arg0)
}

// AllVotes is a free data retrieval call binding the contract method 0xde63f432.
//
// Solidity: function allVotes( uint256) constant returns(proposalId uint256, positionId uint256, candidateId uint256, voterId uint256)
func (_Contracts *ContractsCaller) AllVotes(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ProposalId  *big.Int
	PositionId  *big.Int
	CandidateId *big.Int
	VoterId     *big.Int
}, error) {
	ret := new(struct {
		ProposalId  *big.Int
		PositionId  *big.Int
		CandidateId *big.Int
		VoterId     *big.Int
	})
	out := ret
	err := _Contracts.contract.Call(opts, out, "allVotes", arg0)
	return *ret, err
}

// AllVotes is a free data retrieval call binding the contract method 0xde63f432.
//
// Solidity: function allVotes( uint256) constant returns(proposalId uint256, positionId uint256, candidateId uint256, voterId uint256)
func (_Contracts *ContractsSession) AllVotes(arg0 *big.Int) (struct {
	ProposalId  *big.Int
	PositionId  *big.Int
	CandidateId *big.Int
	VoterId     *big.Int
}, error) {
	return _Contracts.Contract.AllVotes(&_Contracts.CallOpts, arg0)
}

// AllVotes is a free data retrieval call binding the contract method 0xde63f432.
//
// Solidity: function allVotes( uint256) constant returns(proposalId uint256, positionId uint256, candidateId uint256, voterId uint256)
func (_Contracts *ContractsCallerSession) AllVotes(arg0 *big.Int) (struct {
	ProposalId  *big.Int
	PositionId  *big.Int
	CandidateId *big.Int
	VoterId     *big.Int
}, error) {
	return _Contracts.Contract.AllVotes(&_Contracts.CallOpts, arg0)
}

// CandidatesCount is a free data retrieval call binding the contract method 0xb59278b9.
//
// Solidity: function candidatesCount(_proposal uint256, _position uint256) constant returns(uint256)
func (_Contracts *ContractsCaller) CandidatesCount(opts *bind.CallOpts, _proposal *big.Int, _position *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "candidatesCount", _proposal, _position)
	return *ret0, err
}

// CandidatesCount is a free data retrieval call binding the contract method 0xb59278b9.
//
// Solidity: function candidatesCount(_proposal uint256, _position uint256) constant returns(uint256)
func (_Contracts *ContractsSession) CandidatesCount(_proposal *big.Int, _position *big.Int) (*big.Int, error) {
	return _Contracts.Contract.CandidatesCount(&_Contracts.CallOpts, _proposal, _position)
}

// CandidatesCount is a free data retrieval call binding the contract method 0xb59278b9.
//
// Solidity: function candidatesCount(_proposal uint256, _position uint256) constant returns(uint256)
func (_Contracts *ContractsCallerSession) CandidatesCount(_proposal *big.Int, _position *big.Int) (*big.Int, error) {
	return _Contracts.Contract.CandidatesCount(&_Contracts.CallOpts, _proposal, _position)
}

// EligibleVotersCount is a free data retrieval call binding the contract method 0x7e7f72a0.
//
// Solidity: function eligibleVotersCount(_proposal uint256) constant returns(uint256)
func (_Contracts *ContractsCaller) EligibleVotersCount(opts *bind.CallOpts, _proposal *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "eligibleVotersCount", _proposal)
	return *ret0, err
}

// EligibleVotersCount is a free data retrieval call binding the contract method 0x7e7f72a0.
//
// Solidity: function eligibleVotersCount(_proposal uint256) constant returns(uint256)
func (_Contracts *ContractsSession) EligibleVotersCount(_proposal *big.Int) (*big.Int, error) {
	return _Contracts.Contract.EligibleVotersCount(&_Contracts.CallOpts, _proposal)
}

// EligibleVotersCount is a free data retrieval call binding the contract method 0x7e7f72a0.
//
// Solidity: function eligibleVotersCount(_proposal uint256) constant returns(uint256)
func (_Contracts *ContractsCallerSession) EligibleVotersCount(_proposal *big.Int) (*big.Int, error) {
	return _Contracts.Contract.EligibleVotersCount(&_Contracts.CallOpts, _proposal)
}

// GetEligibleVoters is a free data retrieval call binding the contract method 0x6fee3d26.
//
// Solidity: function getEligibleVoters(_proposal uint256, _voterAddr address) constant returns(voterId uint256, voterAddr address, positionId uint256, isVerified bool, isVoted bool)
func (_Contracts *ContractsCaller) GetEligibleVoters(opts *bind.CallOpts, _proposal *big.Int, _voterAddr common.Address) (struct {
	VoterId    *big.Int
	VoterAddr  common.Address
	PositionId *big.Int
	IsVerified bool
	IsVoted    bool
}, error) {
	ret := new(struct {
		VoterId    *big.Int
		VoterAddr  common.Address
		PositionId *big.Int
		IsVerified bool
		IsVoted    bool
	})
	out := ret
	err := _Contracts.contract.Call(opts, out, "getEligibleVoters", _proposal, _voterAddr)
	return *ret, err
}

// GetEligibleVoters is a free data retrieval call binding the contract method 0x6fee3d26.
//
// Solidity: function getEligibleVoters(_proposal uint256, _voterAddr address) constant returns(voterId uint256, voterAddr address, positionId uint256, isVerified bool, isVoted bool)
func (_Contracts *ContractsSession) GetEligibleVoters(_proposal *big.Int, _voterAddr common.Address) (struct {
	VoterId    *big.Int
	VoterAddr  common.Address
	PositionId *big.Int
	IsVerified bool
	IsVoted    bool
}, error) {
	return _Contracts.Contract.GetEligibleVoters(&_Contracts.CallOpts, _proposal, _voterAddr)
}

// GetEligibleVoters is a free data retrieval call binding the contract method 0x6fee3d26.
//
// Solidity: function getEligibleVoters(_proposal uint256, _voterAddr address) constant returns(voterId uint256, voterAddr address, positionId uint256, isVerified bool, isVoted bool)
func (_Contracts *ContractsCallerSession) GetEligibleVoters(_proposal *big.Int, _voterAddr common.Address) (struct {
	VoterId    *big.Int
	VoterAddr  common.Address
	PositionId *big.Int
	IsVerified bool
	IsVoted    bool
}, error) {
	return _Contracts.Contract.GetEligibleVoters(&_Contracts.CallOpts, _proposal, _voterAddr)
}

// Initiator is a free data retrieval call binding the contract method 0x5c39fcc1.
//
// Solidity: function initiator() constant returns(address)
func (_Contracts *ContractsCaller) Initiator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "initiator")
	return *ret0, err
}

// Initiator is a free data retrieval call binding the contract method 0x5c39fcc1.
//
// Solidity: function initiator() constant returns(address)
func (_Contracts *ContractsSession) Initiator() (common.Address, error) {
	return _Contracts.Contract.Initiator(&_Contracts.CallOpts)
}

// Initiator is a free data retrieval call binding the contract method 0x5c39fcc1.
//
// Solidity: function initiator() constant returns(address)
func (_Contracts *ContractsCallerSession) Initiator() (common.Address, error) {
	return _Contracts.Contract.Initiator(&_Contracts.CallOpts)
}

// MCandidate is a free data retrieval call binding the contract method 0xcfb38b13.
//
// Solidity: function mCandidate( uint256,  uint256,  uint256) constant returns(candidateId uint256, positionId uint256, proposalId uint256, isAccredited bool, isUnique bool, candidateAddr address, name bytes32)
func (_Contracts *ContractsCaller) MCandidate(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 *big.Int) (struct {
	CandidateId   *big.Int
	PositionId    *big.Int
	ProposalId    *big.Int
	IsAccredited  bool
	IsUnique      bool
	CandidateAddr common.Address
	Name          [32]byte
}, error) {
	ret := new(struct {
		CandidateId   *big.Int
		PositionId    *big.Int
		ProposalId    *big.Int
		IsAccredited  bool
		IsUnique      bool
		CandidateAddr common.Address
		Name          [32]byte
	})
	out := ret
	err := _Contracts.contract.Call(opts, out, "mCandidate", arg0, arg1, arg2)
	return *ret, err
}

// MCandidate is a free data retrieval call binding the contract method 0xcfb38b13.
//
// Solidity: function mCandidate( uint256,  uint256,  uint256) constant returns(candidateId uint256, positionId uint256, proposalId uint256, isAccredited bool, isUnique bool, candidateAddr address, name bytes32)
func (_Contracts *ContractsSession) MCandidate(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int) (struct {
	CandidateId   *big.Int
	PositionId    *big.Int
	ProposalId    *big.Int
	IsAccredited  bool
	IsUnique      bool
	CandidateAddr common.Address
	Name          [32]byte
}, error) {
	return _Contracts.Contract.MCandidate(&_Contracts.CallOpts, arg0, arg1, arg2)
}

// MCandidate is a free data retrieval call binding the contract method 0xcfb38b13.
//
// Solidity: function mCandidate( uint256,  uint256,  uint256) constant returns(candidateId uint256, positionId uint256, proposalId uint256, isAccredited bool, isUnique bool, candidateAddr address, name bytes32)
func (_Contracts *ContractsCallerSession) MCandidate(arg0 *big.Int, arg1 *big.Int, arg2 *big.Int) (struct {
	CandidateId   *big.Int
	PositionId    *big.Int
	ProposalId    *big.Int
	IsAccredited  bool
	IsUnique      bool
	CandidateAddr common.Address
	Name          [32]byte
}, error) {
	return _Contracts.Contract.MCandidate(&_Contracts.CallOpts, arg0, arg1, arg2)
}

// MPosition is a free data retrieval call binding the contract method 0xb32f0ecf.
//
// Solidity: function mPosition( uint256,  uint256) constant returns(proposalId uint256, positionId uint256, maxCandidate uint8, title bytes32)
func (_Contracts *ContractsCaller) MPosition(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (struct {
	ProposalId   *big.Int
	PositionId   *big.Int
	MaxCandidate uint8
	Title        [32]byte
}, error) {
	ret := new(struct {
		ProposalId   *big.Int
		PositionId   *big.Int
		MaxCandidate uint8
		Title        [32]byte
	})
	out := ret
	err := _Contracts.contract.Call(opts, out, "mPosition", arg0, arg1)
	return *ret, err
}

// MPosition is a free data retrieval call binding the contract method 0xb32f0ecf.
//
// Solidity: function mPosition( uint256,  uint256) constant returns(proposalId uint256, positionId uint256, maxCandidate uint8, title bytes32)
func (_Contracts *ContractsSession) MPosition(arg0 *big.Int, arg1 *big.Int) (struct {
	ProposalId   *big.Int
	PositionId   *big.Int
	MaxCandidate uint8
	Title        [32]byte
}, error) {
	return _Contracts.Contract.MPosition(&_Contracts.CallOpts, arg0, arg1)
}

// MPosition is a free data retrieval call binding the contract method 0xb32f0ecf.
//
// Solidity: function mPosition( uint256,  uint256) constant returns(proposalId uint256, positionId uint256, maxCandidate uint8, title bytes32)
func (_Contracts *ContractsCallerSession) MPosition(arg0 *big.Int, arg1 *big.Int) (struct {
	ProposalId   *big.Int
	PositionId   *big.Int
	MaxCandidate uint8
	Title        [32]byte
}, error) {
	return _Contracts.Contract.MPosition(&_Contracts.CallOpts, arg0, arg1)
}

// MProposalVoters is a free data retrieval call binding the contract method 0xcbd342cc.
//
// Solidity: function mProposalVoters( uint256,  uint256) constant returns(isVerified bool, isVoted bool, positionId uint256)
func (_Contracts *ContractsCaller) MProposalVoters(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (struct {
	IsVerified bool
	IsVoted    bool
	PositionId *big.Int
}, error) {
	ret := new(struct {
		IsVerified bool
		IsVoted    bool
		PositionId *big.Int
	})
	out := ret
	err := _Contracts.contract.Call(opts, out, "mProposalVoters", arg0, arg1)
	return *ret, err
}

// MProposalVoters is a free data retrieval call binding the contract method 0xcbd342cc.
//
// Solidity: function mProposalVoters( uint256,  uint256) constant returns(isVerified bool, isVoted bool, positionId uint256)
func (_Contracts *ContractsSession) MProposalVoters(arg0 *big.Int, arg1 *big.Int) (struct {
	IsVerified bool
	IsVoted    bool
	PositionId *big.Int
}, error) {
	return _Contracts.Contract.MProposalVoters(&_Contracts.CallOpts, arg0, arg1)
}

// MProposalVoters is a free data retrieval call binding the contract method 0xcbd342cc.
//
// Solidity: function mProposalVoters( uint256,  uint256) constant returns(isVerified bool, isVoted bool, positionId uint256)
func (_Contracts *ContractsCallerSession) MProposalVoters(arg0 *big.Int, arg1 *big.Int) (struct {
	IsVerified bool
	IsVoted    bool
	PositionId *big.Int
}, error) {
	return _Contracts.Contract.MProposalVoters(&_Contracts.CallOpts, arg0, arg1)
}

// PositionsCount is a free data retrieval call binding the contract method 0x2014678d.
//
// Solidity: function positionsCount(_proposal uint256) constant returns(uint256)
func (_Contracts *ContractsCaller) PositionsCount(opts *bind.CallOpts, _proposal *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "positionsCount", _proposal)
	return *ret0, err
}

// PositionsCount is a free data retrieval call binding the contract method 0x2014678d.
//
// Solidity: function positionsCount(_proposal uint256) constant returns(uint256)
func (_Contracts *ContractsSession) PositionsCount(_proposal *big.Int) (*big.Int, error) {
	return _Contracts.Contract.PositionsCount(&_Contracts.CallOpts, _proposal)
}

// PositionsCount is a free data retrieval call binding the contract method 0x2014678d.
//
// Solidity: function positionsCount(_proposal uint256) constant returns(uint256)
func (_Contracts *ContractsCallerSession) PositionsCount(_proposal *big.Int) (*big.Int, error) {
	return _Contracts.Contract.PositionsCount(&_Contracts.CallOpts, _proposal)
}

// VotersCount is a free data retrieval call binding the contract method 0x98c07938.
//
// Solidity: function votersCount() constant returns(uint256)
func (_Contracts *ContractsCaller) VotersCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "votersCount")
	return *ret0, err
}

// VotersCount is a free data retrieval call binding the contract method 0x98c07938.
//
// Solidity: function votersCount() constant returns(uint256)
func (_Contracts *ContractsSession) VotersCount() (*big.Int, error) {
	return _Contracts.Contract.VotersCount(&_Contracts.CallOpts)
}

// VotersCount is a free data retrieval call binding the contract method 0x98c07938.
//
// Solidity: function votersCount() constant returns(uint256)
func (_Contracts *ContractsCallerSession) VotersCount() (*big.Int, error) {
	return _Contracts.Contract.VotersCount(&_Contracts.CallOpts)
}

// VotesCount is a free data retrieval call binding the contract method 0x8778b27d.
//
// Solidity: function votesCount() constant returns(uint256)
func (_Contracts *ContractsCaller) VotesCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "votesCount")
	return *ret0, err
}

// VotesCount is a free data retrieval call binding the contract method 0x8778b27d.
//
// Solidity: function votesCount() constant returns(uint256)
func (_Contracts *ContractsSession) VotesCount() (*big.Int, error) {
	return _Contracts.Contract.VotesCount(&_Contracts.CallOpts)
}

// VotesCount is a free data retrieval call binding the contract method 0x8778b27d.
//
// Solidity: function votesCount() constant returns(uint256)
func (_Contracts *ContractsCallerSession) VotesCount() (*big.Int, error) {
	return _Contracts.Contract.VotesCount(&_Contracts.CallOpts)
}

// VerifyVoter is a paid mutator transaction binding the contract method 0xb48918f5.
//
// Solidity: function VerifyVoter(_proposal uint256, _positionId uint256, _voterId uint256, _voterAddr address) returns(bool)
func (_Contracts *ContractsTransactor) VerifyVoter(opts *bind.TransactOpts, _proposal *big.Int, _positionId *big.Int, _voterId *big.Int, _voterAddr common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "VerifyVoter", _proposal, _positionId, _voterId, _voterAddr)
}

// VerifyVoter is a paid mutator transaction binding the contract method 0xb48918f5.
//
// Solidity: function VerifyVoter(_proposal uint256, _positionId uint256, _voterId uint256, _voterAddr address) returns(bool)
func (_Contracts *ContractsSession) VerifyVoter(_proposal *big.Int, _positionId *big.Int, _voterId *big.Int, _voterAddr common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.VerifyVoter(&_Contracts.TransactOpts, _proposal, _positionId, _voterId, _voterAddr)
}

// VerifyVoter is a paid mutator transaction binding the contract method 0xb48918f5.
//
// Solidity: function VerifyVoter(_proposal uint256, _positionId uint256, _voterId uint256, _voterAddr address) returns(bool)
func (_Contracts *ContractsTransactorSession) VerifyVoter(_proposal *big.Int, _positionId *big.Int, _voterId *big.Int, _voterAddr common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.VerifyVoter(&_Contracts.TransactOpts, _proposal, _positionId, _voterId, _voterAddr)
}

// AccreditCandidate is a paid mutator transaction binding the contract method 0xc95859e8.
//
// Solidity: function accreditCandidate(_candidateId uint256, _positionId uint256, _proposalId uint256) returns(bool)
func (_Contracts *ContractsTransactor) AccreditCandidate(opts *bind.TransactOpts, _candidateId *big.Int, _positionId *big.Int, _proposalId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "accreditCandidate", _candidateId, _positionId, _proposalId)
}

// AccreditCandidate is a paid mutator transaction binding the contract method 0xc95859e8.
//
// Solidity: function accreditCandidate(_candidateId uint256, _positionId uint256, _proposalId uint256) returns(bool)
func (_Contracts *ContractsSession) AccreditCandidate(_candidateId *big.Int, _positionId *big.Int, _proposalId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AccreditCandidate(&_Contracts.TransactOpts, _candidateId, _positionId, _proposalId)
}

// AccreditCandidate is a paid mutator transaction binding the contract method 0xc95859e8.
//
// Solidity: function accreditCandidate(_candidateId uint256, _positionId uint256, _proposalId uint256) returns(bool)
func (_Contracts *ContractsTransactorSession) AccreditCandidate(_candidateId *big.Int, _positionId *big.Int, _proposalId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AccreditCandidate(&_Contracts.TransactOpts, _candidateId, _positionId, _proposalId)
}

// AddCandidate is a paid mutator transaction binding the contract method 0x70b75e4c.
//
// Solidity: function addCandidate(_candidateAddr address, _name bytes32, _positionId uint256, _proposal uint256, _candidateId uint256) returns(uint256)
func (_Contracts *ContractsTransactor) AddCandidate(opts *bind.TransactOpts, _candidateAddr common.Address, _name [32]byte, _positionId *big.Int, _proposal *big.Int, _candidateId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "addCandidate", _candidateAddr, _name, _positionId, _proposal, _candidateId)
}

// AddCandidate is a paid mutator transaction binding the contract method 0x70b75e4c.
//
// Solidity: function addCandidate(_candidateAddr address, _name bytes32, _positionId uint256, _proposal uint256, _candidateId uint256) returns(uint256)
func (_Contracts *ContractsSession) AddCandidate(_candidateAddr common.Address, _name [32]byte, _positionId *big.Int, _proposal *big.Int, _candidateId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AddCandidate(&_Contracts.TransactOpts, _candidateAddr, _name, _positionId, _proposal, _candidateId)
}

// AddCandidate is a paid mutator transaction binding the contract method 0x70b75e4c.
//
// Solidity: function addCandidate(_candidateAddr address, _name bytes32, _positionId uint256, _proposal uint256, _candidateId uint256) returns(uint256)
func (_Contracts *ContractsTransactorSession) AddCandidate(_candidateAddr common.Address, _name [32]byte, _positionId *big.Int, _proposal *big.Int, _candidateId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AddCandidate(&_Contracts.TransactOpts, _candidateAddr, _name, _positionId, _proposal, _candidateId)
}

// AddPosition is a paid mutator transaction binding the contract method 0x25d1a351.
//
// Solidity: function addPosition(_title bytes32, _proposalId uint256, _positionId uint256, _maxCandidate uint8) returns(positionId uint256)
func (_Contracts *ContractsTransactor) AddPosition(opts *bind.TransactOpts, _title [32]byte, _proposalId *big.Int, _positionId *big.Int, _maxCandidate uint8) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "addPosition", _title, _proposalId, _positionId, _maxCandidate)
}

// AddPosition is a paid mutator transaction binding the contract method 0x25d1a351.
//
// Solidity: function addPosition(_title bytes32, _proposalId uint256, _positionId uint256, _maxCandidate uint8) returns(positionId uint256)
func (_Contracts *ContractsSession) AddPosition(_title [32]byte, _proposalId *big.Int, _positionId *big.Int, _maxCandidate uint8) (*types.Transaction, error) {
	return _Contracts.Contract.AddPosition(&_Contracts.TransactOpts, _title, _proposalId, _positionId, _maxCandidate)
}

// AddPosition is a paid mutator transaction binding the contract method 0x25d1a351.
//
// Solidity: function addPosition(_title bytes32, _proposalId uint256, _positionId uint256, _maxCandidate uint8) returns(positionId uint256)
func (_Contracts *ContractsTransactorSession) AddPosition(_title [32]byte, _proposalId *big.Int, _positionId *big.Int, _maxCandidate uint8) (*types.Transaction, error) {
	return _Contracts.Contract.AddPosition(&_Contracts.TransactOpts, _title, _proposalId, _positionId, _maxCandidate)
}

// AddProposal is a paid mutator transaction binding the contract method 0xa536c98b.
//
// Solidity: function addProposal(_name bytes32, _proposalId uint256, _endDate uint256) returns(uint256)
func (_Contracts *ContractsTransactor) AddProposal(opts *bind.TransactOpts, _name [32]byte, _proposalId *big.Int, _endDate *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "addProposal", _name, _proposalId, _endDate)
}

// AddProposal is a paid mutator transaction binding the contract method 0xa536c98b.
//
// Solidity: function addProposal(_name bytes32, _proposalId uint256, _endDate uint256) returns(uint256)
func (_Contracts *ContractsSession) AddProposal(_name [32]byte, _proposalId *big.Int, _endDate *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AddProposal(&_Contracts.TransactOpts, _name, _proposalId, _endDate)
}

// AddProposal is a paid mutator transaction binding the contract method 0xa536c98b.
//
// Solidity: function addProposal(_name bytes32, _proposalId uint256, _endDate uint256) returns(uint256)
func (_Contracts *ContractsTransactorSession) AddProposal(_name [32]byte, _proposalId *big.Int, _endDate *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AddProposal(&_Contracts.TransactOpts, _name, _proposalId, _endDate)
}

// InitiateVoting is a paid mutator transaction binding the contract method 0x45714684.
//
// Solidity: function initiateVoting(_proposal uint256) returns(bool)
func (_Contracts *ContractsTransactor) InitiateVoting(opts *bind.TransactOpts, _proposal *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "initiateVoting", _proposal)
}

// InitiateVoting is a paid mutator transaction binding the contract method 0x45714684.
//
// Solidity: function initiateVoting(_proposal uint256) returns(bool)
func (_Contracts *ContractsSession) InitiateVoting(_proposal *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.InitiateVoting(&_Contracts.TransactOpts, _proposal)
}

// InitiateVoting is a paid mutator transaction binding the contract method 0x45714684.
//
// Solidity: function initiateVoting(_proposal uint256) returns(bool)
func (_Contracts *ContractsTransactorSession) InitiateVoting(_proposal *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.InitiateVoting(&_Contracts.TransactOpts, _proposal)
}

// RegisterVoter is a paid mutator transaction binding the contract method 0xcbea81ef.
//
// Solidity: function registerVoter(_voter address, _IDVoter uint256) returns(uint256)
func (_Contracts *ContractsTransactor) RegisterVoter(opts *bind.TransactOpts, _voter common.Address, _IDVoter *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "registerVoter", _voter, _IDVoter)
}

// RegisterVoter is a paid mutator transaction binding the contract method 0xcbea81ef.
//
// Solidity: function registerVoter(_voter address, _IDVoter uint256) returns(uint256)
func (_Contracts *ContractsSession) RegisterVoter(_voter common.Address, _IDVoter *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.RegisterVoter(&_Contracts.TransactOpts, _voter, _IDVoter)
}

// RegisterVoter is a paid mutator transaction binding the contract method 0xcbea81ef.
//
// Solidity: function registerVoter(_voter address, _IDVoter uint256) returns(uint256)
func (_Contracts *ContractsTransactorSession) RegisterVoter(_voter common.Address, _IDVoter *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.RegisterVoter(&_Contracts.TransactOpts, _voter, _IDVoter)
}

// Vote is a paid mutator transaction binding the contract method 0x68c9e388.
//
// Solidity: function vote(_proposalId uint256, _positionId uint256, _candidateId uint256, _voterId uint256) returns()
func (_Contracts *ContractsTransactor) Vote(opts *bind.TransactOpts, _proposalId *big.Int, _positionId *big.Int, _candidateId *big.Int, _voterId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "vote", _proposalId, _positionId, _candidateId, _voterId)
}

// Vote is a paid mutator transaction binding the contract method 0x68c9e388.
//
// Solidity: function vote(_proposalId uint256, _positionId uint256, _candidateId uint256, _voterId uint256) returns()
func (_Contracts *ContractsSession) Vote(_proposalId *big.Int, _positionId *big.Int, _candidateId *big.Int, _voterId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Vote(&_Contracts.TransactOpts, _proposalId, _positionId, _candidateId, _voterId)
}

// Vote is a paid mutator transaction binding the contract method 0x68c9e388.
//
// Solidity: function vote(_proposalId uint256, _positionId uint256, _candidateId uint256, _voterId uint256) returns()
func (_Contracts *ContractsTransactorSession) Vote(_proposalId *big.Int, _positionId *big.Int, _candidateId *big.Int, _voterId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Vote(&_Contracts.TransactOpts, _proposalId, _positionId, _candidateId, _voterId)
}

// ContractsAccreditedIterator is returned from FilterAccredited and is used to iterate over the raw logs and unpacked data for Accredited events raised by the Contracts contract.
type ContractsAccreditedIterator struct {
	Event *ContractsAccredited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsAccreditedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsAccredited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsAccredited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsAccreditedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsAccreditedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsAccredited represents a Accredited event raised by the Contracts contract.
type ContractsAccredited struct {
	Candidate *big.Int
	Proposal  *big.Int
	Position  *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccredited is a free log retrieval operation binding the contract event 0x73d96b366a16ae6ee378029ad183381ce418bfedaf573cbd5292ef9df4cd13c2.
//
// Solidity: e Accredited(_candidate indexed uint256, _proposal indexed uint256, _position indexed uint256)
func (_Contracts *ContractsFilterer) FilterAccredited(opts *bind.FilterOpts, _candidate []*big.Int, _proposal []*big.Int, _position []*big.Int) (*ContractsAccreditedIterator, error) {

	var _candidateRule []interface{}
	for _, _candidateItem := range _candidate {
		_candidateRule = append(_candidateRule, _candidateItem)
	}
	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}
	var _positionRule []interface{}
	for _, _positionItem := range _position {
		_positionRule = append(_positionRule, _positionItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "Accredited", _candidateRule, _proposalRule, _positionRule)
	if err != nil {
		return nil, err
	}
	return &ContractsAccreditedIterator{contract: _Contracts.contract, event: "Accredited", logs: logs, sub: sub}, nil
}

// WatchAccredited is a free log subscription operation binding the contract event 0x73d96b366a16ae6ee378029ad183381ce418bfedaf573cbd5292ef9df4cd13c2.
//
// Solidity: e Accredited(_candidate indexed uint256, _proposal indexed uint256, _position indexed uint256)
func (_Contracts *ContractsFilterer) WatchAccredited(opts *bind.WatchOpts, sink chan<- *ContractsAccredited, _candidate []*big.Int, _proposal []*big.Int, _position []*big.Int) (event.Subscription, error) {

	var _candidateRule []interface{}
	for _, _candidateItem := range _candidate {
		_candidateRule = append(_candidateRule, _candidateItem)
	}
	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}
	var _positionRule []interface{}
	for _, _positionItem := range _position {
		_positionRule = append(_positionRule, _positionItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "Accredited", _candidateRule, _proposalRule, _positionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsAccredited)
				if err := _Contracts.contract.UnpackLog(event, "Accredited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsNewCandidateIterator is returned from FilterNewCandidate and is used to iterate over the raw logs and unpacked data for NewCandidate events raised by the Contracts contract.
type ContractsNewCandidateIterator struct {
	Event *ContractsNewCandidate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsNewCandidateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsNewCandidate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsNewCandidate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsNewCandidateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsNewCandidateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsNewCandidate represents a NewCandidate event raised by the Contracts contract.
type ContractsNewCandidate struct {
	Proposal    *big.Int
	Position    *big.Int
	CandidateId *big.Int
	Name        [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewCandidate is a free log retrieval operation binding the contract event 0x1e95643b0827ec2147ab47714fc6a9cace51b62fcfe439b405debb4ce49c8536.
//
// Solidity: e NewCandidate(_proposal indexed uint256, _position indexed uint256, _candidateId uint256, _name indexed bytes32)
func (_Contracts *ContractsFilterer) FilterNewCandidate(opts *bind.FilterOpts, _proposal []*big.Int, _position []*big.Int, _name [][32]byte) (*ContractsNewCandidateIterator, error) {

	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}
	var _positionRule []interface{}
	for _, _positionItem := range _position {
		_positionRule = append(_positionRule, _positionItem)
	}

	var _nameRule []interface{}
	for _, _nameItem := range _name {
		_nameRule = append(_nameRule, _nameItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "NewCandidate", _proposalRule, _positionRule, _nameRule)
	if err != nil {
		return nil, err
	}
	return &ContractsNewCandidateIterator{contract: _Contracts.contract, event: "NewCandidate", logs: logs, sub: sub}, nil
}

// WatchNewCandidate is a free log subscription operation binding the contract event 0x1e95643b0827ec2147ab47714fc6a9cace51b62fcfe439b405debb4ce49c8536.
//
// Solidity: e NewCandidate(_proposal indexed uint256, _position indexed uint256, _candidateId uint256, _name indexed bytes32)
func (_Contracts *ContractsFilterer) WatchNewCandidate(opts *bind.WatchOpts, sink chan<- *ContractsNewCandidate, _proposal []*big.Int, _position []*big.Int, _name [][32]byte) (event.Subscription, error) {

	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}
	var _positionRule []interface{}
	for _, _positionItem := range _position {
		_positionRule = append(_positionRule, _positionItem)
	}

	var _nameRule []interface{}
	for _, _nameItem := range _name {
		_nameRule = append(_nameRule, _nameItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "NewCandidate", _proposalRule, _positionRule, _nameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsNewCandidate)
				if err := _Contracts.contract.UnpackLog(event, "NewCandidate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsNewPositionIterator is returned from FilterNewPosition and is used to iterate over the raw logs and unpacked data for NewPosition events raised by the Contracts contract.
type ContractsNewPositionIterator struct {
	Event *ContractsNewPosition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsNewPositionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsNewPosition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsNewPosition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsNewPositionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsNewPositionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsNewPosition represents a NewPosition event raised by the Contracts contract.
type ContractsNewPosition struct {
	Proposal *big.Int
	Position *big.Int
	Title    [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewPosition is a free log retrieval operation binding the contract event 0xc0ee56176e739792e75a2fab38606e3331814f6921088f2934b8a279d3a234cb.
//
// Solidity: e NewPosition(_proposal indexed uint256, _position indexed uint256, _title indexed bytes32)
func (_Contracts *ContractsFilterer) FilterNewPosition(opts *bind.FilterOpts, _proposal []*big.Int, _position []*big.Int, _title [][32]byte) (*ContractsNewPositionIterator, error) {

	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}
	var _positionRule []interface{}
	for _, _positionItem := range _position {
		_positionRule = append(_positionRule, _positionItem)
	}
	var _titleRule []interface{}
	for _, _titleItem := range _title {
		_titleRule = append(_titleRule, _titleItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "NewPosition", _proposalRule, _positionRule, _titleRule)
	if err != nil {
		return nil, err
	}
	return &ContractsNewPositionIterator{contract: _Contracts.contract, event: "NewPosition", logs: logs, sub: sub}, nil
}

// WatchNewPosition is a free log subscription operation binding the contract event 0xc0ee56176e739792e75a2fab38606e3331814f6921088f2934b8a279d3a234cb.
//
// Solidity: e NewPosition(_proposal indexed uint256, _position indexed uint256, _title indexed bytes32)
func (_Contracts *ContractsFilterer) WatchNewPosition(opts *bind.WatchOpts, sink chan<- *ContractsNewPosition, _proposal []*big.Int, _position []*big.Int, _title [][32]byte) (event.Subscription, error) {

	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}
	var _positionRule []interface{}
	for _, _positionItem := range _position {
		_positionRule = append(_positionRule, _positionItem)
	}
	var _titleRule []interface{}
	for _, _titleItem := range _title {
		_titleRule = append(_titleRule, _titleItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "NewPosition", _proposalRule, _positionRule, _titleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsNewPosition)
				if err := _Contracts.contract.UnpackLog(event, "NewPosition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsNewProposalIterator is returned from FilterNewProposal and is used to iterate over the raw logs and unpacked data for NewProposal events raised by the Contracts contract.
type ContractsNewProposalIterator struct {
	Event *ContractsNewProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsNewProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsNewProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsNewProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsNewProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsNewProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsNewProposal represents a NewProposal event raised by the Contracts contract.
type ContractsNewProposal struct {
	Name       [32]byte
	ProposalId *big.Int
	EndDate    *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewProposal is a free log retrieval operation binding the contract event 0xab8719914d0ac507e4a8449cc44d9067d0513f6cacce323c05dd17bf1b171e57.
//
// Solidity: e NewProposal(_name indexed bytes32, _proposalId indexed uint256, _endDate uint256)
func (_Contracts *ContractsFilterer) FilterNewProposal(opts *bind.FilterOpts, _name [][32]byte, _proposalId []*big.Int) (*ContractsNewProposalIterator, error) {

	var _nameRule []interface{}
	for _, _nameItem := range _name {
		_nameRule = append(_nameRule, _nameItem)
	}
	var _proposalIdRule []interface{}
	for _, _proposalIdItem := range _proposalId {
		_proposalIdRule = append(_proposalIdRule, _proposalIdItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "NewProposal", _nameRule, _proposalIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractsNewProposalIterator{contract: _Contracts.contract, event: "NewProposal", logs: logs, sub: sub}, nil
}

// WatchNewProposal is a free log subscription operation binding the contract event 0xab8719914d0ac507e4a8449cc44d9067d0513f6cacce323c05dd17bf1b171e57.
//
// Solidity: e NewProposal(_name indexed bytes32, _proposalId indexed uint256, _endDate uint256)
func (_Contracts *ContractsFilterer) WatchNewProposal(opts *bind.WatchOpts, sink chan<- *ContractsNewProposal, _name [][32]byte, _proposalId []*big.Int) (event.Subscription, error) {

	var _nameRule []interface{}
	for _, _nameItem := range _name {
		_nameRule = append(_nameRule, _nameItem)
	}
	var _proposalIdRule []interface{}
	for _, _proposalIdItem := range _proposalId {
		_proposalIdRule = append(_proposalIdRule, _proposalIdItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "NewProposal", _nameRule, _proposalIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsNewProposal)
				if err := _Contracts.contract.UnpackLog(event, "NewProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsNewVoterIterator is returned from FilterNewVoter and is used to iterate over the raw logs and unpacked data for NewVoter events raised by the Contracts contract.
type ContractsNewVoterIterator struct {
	Event *ContractsNewVoter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsNewVoterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsNewVoter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsNewVoter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsNewVoterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsNewVoterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsNewVoter represents a NewVoter event raised by the Contracts contract.
type ContractsNewVoter struct {
	Voter  common.Address
	IdHash *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNewVoter is a free log retrieval operation binding the contract event 0xc13c7a26f6074f0de1b23f0fded61c05f23fca064951d26e3e074db2f5f4f87d.
//
// Solidity: e NewVoter(_voter indexed address, _idHash uint256)
func (_Contracts *ContractsFilterer) FilterNewVoter(opts *bind.FilterOpts, _voter []common.Address) (*ContractsNewVoterIterator, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "NewVoter", _voterRule)
	if err != nil {
		return nil, err
	}
	return &ContractsNewVoterIterator{contract: _Contracts.contract, event: "NewVoter", logs: logs, sub: sub}, nil
}

// WatchNewVoter is a free log subscription operation binding the contract event 0xc13c7a26f6074f0de1b23f0fded61c05f23fca064951d26e3e074db2f5f4f87d.
//
// Solidity: e NewVoter(_voter indexed address, _idHash uint256)
func (_Contracts *ContractsFilterer) WatchNewVoter(opts *bind.WatchOpts, sink chan<- *ContractsNewVoter, _voter []common.Address) (event.Subscription, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "NewVoter", _voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsNewVoter)
				if err := _Contracts.contract.UnpackLog(event, "NewVoter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsProposalActiveIterator is returned from FilterProposalActive and is used to iterate over the raw logs and unpacked data for ProposalActive events raised by the Contracts contract.
type ContractsProposalActiveIterator struct {
	Event *ContractsProposalActive // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsProposalActiveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsProposalActive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsProposalActive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsProposalActiveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsProposalActiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsProposalActive represents a ProposalActive event raised by the Contracts contract.
type ContractsProposalActive struct {
	Proposal *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterProposalActive is a free log retrieval operation binding the contract event 0x9b74c3bb17673b7eaf4d072ccbd3d83177acced2552ff346ebfdcabbfd60793d.
//
// Solidity: e ProposalActive(_proposal indexed uint256)
func (_Contracts *ContractsFilterer) FilterProposalActive(opts *bind.FilterOpts, _proposal []*big.Int) (*ContractsProposalActiveIterator, error) {

	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "ProposalActive", _proposalRule)
	if err != nil {
		return nil, err
	}
	return &ContractsProposalActiveIterator{contract: _Contracts.contract, event: "ProposalActive", logs: logs, sub: sub}, nil
}

// WatchProposalActive is a free log subscription operation binding the contract event 0x9b74c3bb17673b7eaf4d072ccbd3d83177acced2552ff346ebfdcabbfd60793d.
//
// Solidity: e ProposalActive(_proposal indexed uint256)
func (_Contracts *ContractsFilterer) WatchProposalActive(opts *bind.WatchOpts, sink chan<- *ContractsProposalActive, _proposal []*big.Int) (event.Subscription, error) {

	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "ProposalActive", _proposalRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsProposalActive)
				if err := _Contracts.contract.UnpackLog(event, "ProposalActive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsVerifiedIterator is returned from FilterVerified and is used to iterate over the raw logs and unpacked data for Verified events raised by the Contracts contract.
type ContractsVerifiedIterator struct {
	Event *ContractsVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsVerified represents a Verified event raised by the Contracts contract.
type ContractsVerified struct {
	Voter    *big.Int
	Proposal *big.Int
	Position *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterVerified is a free log retrieval operation binding the contract event 0xa2dc1494de1f2b3b6c6ad35fb60e947a264246252bc0245922cfb612e6ccb7cd.
//
// Solidity: e Verified(_voter indexed uint256, _proposal indexed uint256, _position indexed uint256)
func (_Contracts *ContractsFilterer) FilterVerified(opts *bind.FilterOpts, _voter []*big.Int, _proposal []*big.Int, _position []*big.Int) (*ContractsVerifiedIterator, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}
	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}
	var _positionRule []interface{}
	for _, _positionItem := range _position {
		_positionRule = append(_positionRule, _positionItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "Verified", _voterRule, _proposalRule, _positionRule)
	if err != nil {
		return nil, err
	}
	return &ContractsVerifiedIterator{contract: _Contracts.contract, event: "Verified", logs: logs, sub: sub}, nil
}

// WatchVerified is a free log subscription operation binding the contract event 0xa2dc1494de1f2b3b6c6ad35fb60e947a264246252bc0245922cfb612e6ccb7cd.
//
// Solidity: e Verified(_voter indexed uint256, _proposal indexed uint256, _position indexed uint256)
func (_Contracts *ContractsFilterer) WatchVerified(opts *bind.WatchOpts, sink chan<- *ContractsVerified, _voter []*big.Int, _proposal []*big.Int, _position []*big.Int) (event.Subscription, error) {

	var _voterRule []interface{}
	for _, _voterItem := range _voter {
		_voterRule = append(_voterRule, _voterItem)
	}
	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}
	var _positionRule []interface{}
	for _, _positionItem := range _position {
		_positionRule = append(_positionRule, _positionItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "Verified", _voterRule, _proposalRule, _positionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsVerified)
				if err := _Contracts.contract.UnpackLog(event, "Verified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the Contracts contract.
type ContractsVotedIterator struct {
	Event *ContractsVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsVoted represents a Voted event raised by the Contracts contract.
type ContractsVoted struct {
	Proposal  *big.Int
	Position  *big.Int
	Candidate *big.Int
	Voter     *big.Int
	VoterAddr common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVoted is a free log retrieval operation binding the contract event 0xed713a090e7c13addbebee5adb0fb6ca78cfd62ed6e87ef782b0707d19fcc650.
//
// Solidity: e Voted(_proposal indexed uint256, _position indexed uint256, _candidate indexed uint256, _voter uint256, _voterAddr address)
func (_Contracts *ContractsFilterer) FilterVoted(opts *bind.FilterOpts, _proposal []*big.Int, _position []*big.Int, _candidate []*big.Int) (*ContractsVotedIterator, error) {

	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}
	var _positionRule []interface{}
	for _, _positionItem := range _position {
		_positionRule = append(_positionRule, _positionItem)
	}
	var _candidateRule []interface{}
	for _, _candidateItem := range _candidate {
		_candidateRule = append(_candidateRule, _candidateItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "Voted", _proposalRule, _positionRule, _candidateRule)
	if err != nil {
		return nil, err
	}
	return &ContractsVotedIterator{contract: _Contracts.contract, event: "Voted", logs: logs, sub: sub}, nil
}

// WatchVoted is a free log subscription operation binding the contract event 0xed713a090e7c13addbebee5adb0fb6ca78cfd62ed6e87ef782b0707d19fcc650.
//
// Solidity: e Voted(_proposal indexed uint256, _position indexed uint256, _candidate indexed uint256, _voter uint256, _voterAddr address)
func (_Contracts *ContractsFilterer) WatchVoted(opts *bind.WatchOpts, sink chan<- *ContractsVoted, _proposal []*big.Int, _position []*big.Int, _candidate []*big.Int) (event.Subscription, error) {

	var _proposalRule []interface{}
	for _, _proposalItem := range _proposal {
		_proposalRule = append(_proposalRule, _proposalItem)
	}
	var _positionRule []interface{}
	for _, _positionItem := range _position {
		_positionRule = append(_positionRule, _positionItem)
	}
	var _candidateRule []interface{}
	for _, _candidateItem := range _candidate {
		_candidateRule = append(_candidateRule, _candidateItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "Voted", _proposalRule, _positionRule, _candidateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsVoted)
				if err := _Contracts.contract.UnpackLog(event, "Voted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
